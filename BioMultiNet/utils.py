# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_generate_data.ipynb.

# %% auto 0
__all__ = ['obfuscate_nodes', 'create_random_graph']

# %% ../nbs/02_generate_data.ipynb 5
import networkx as nx
import csv
from pathlib import Path
import random
import string

# %% ../nbs/02_generate_data.ipynb 9
def obfuscate_nodes(n_nodes:int, str_len:int=10) -> dict:
    """
    Maps nodes from range [0, n_nodes) to random strings of length str_len
    """
    d = {}
    for i in range(n_nodes):
        d[i] = ''.join(random.choices(string.ascii_uppercase, k=1)) +\
              ''.join(random.choices(string.ascii_uppercase + string.digits, k=(str_len-1)))
    
    #TODO:verify that there are no duplicates
    return d

# %% ../nbs/02_generate_data.ipynb 11
def create_random_graph(n_nodes:int, prob:float, directed:bool=False, path_to:str|Path=None, label:str=None):
    G = nx.erdos_renyi_graph(n_nodes, prob, directed=directed)
    edges = G.edges()
    if path_to is not None:
        with open(path_to, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile, delimiter=' ')
            for edge in edges:
                writer.writerow([edge[0], edge[1], label])
        return None
    return G
